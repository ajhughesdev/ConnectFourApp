@page "/player"
@inject HttpClient Client
@inject IJSRuntime Js

<div class="form-container">

    <div class="form-menu">

        <h1 class="form-title">high scores</h1>

        <p class="form-p">Add yourself to the high score list</p>
        @if (Players == null)
        {
            <h2 class="conditional-title">Loading...</h2>
        }
        else if (Players.Length == 0)
        {
            <h2 class="no-records">No Records Found.</h2>
            <a class="form-a" href="player/create">Create New</a>
        }
        else
        {
            <div class="table-container">

                <div class="high-scores">
                    <div class="form-head">
                        <div>Initials</div>
                        <div>Score</div>
                        <div></div>
                    </div>
                    <div class="form-body">
                        @foreach (var player in Players)
                        {
                            <div>@player.Initials</div>
                            <div>@player.Score</div>
                            <div class="buttons">
                                <a class="table-button" href="player/edit/@player.Id">Edit</a>
                                <button class="table-button" @onclick="@(() => Delete(player.Id))">Delete</button>
                            </div>
                        }
                    </div>
                </div>
                <a class="form-a" href="player/create">Create New</a>
            </div>
        }

    </div>
</div>
}


@code {

    Player[]
        Players { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Players = await Client.GetFromJsonAsync<Player[]>("api/player");
    }

    async Task Delete(int playerId)
    {
        var player = Players.First(x => x.Id == playerId);
        if (await Js.InvokeAsync<bool>("confirm", $"Do you want to delete {player.Initials}'s ({player.Id}) Record?"))
        {
            await Client.DeleteAsync($"api/player/{playerId}");
            await OnInitializedAsync();
        }
    }

}

}