@using ConnectFourApp.Shared.Models

<PageTitle>Frontend Mentor | Connect Four game</PageTitle>

<div class="page-container">

    <header>
        <nav class="nav-menu">
            <button type="button">menu</button>
            <img src="./assets/images/logo.svg" alt="logo" class="logo"/>
            
            <button @onclick="@ResetGame">restart</button>
        
        </nav>
    
    </header>
    
    <main>
        <div class="board-container">
            <img src="./assets/images/board-layer-black-large.svg" alt="" class="board-layer" />
            <div class="board">
                @for (var i = 0; i < 7; i++)
                {
                    <div class="column">
                        @for (var j = 0; j < 6; j++)
                        {
                            <div class=@($"gamepiece {_gameBoard.Board[i,j].Player.ToString().ToLower()} {_gameBoard.Board[i,j].Player.ToString().ToLower()}-drop{j} {_gameBoard.Board[i,j].Player.ToString().ToLower()}-col{i}")></div>

                        }

                    </div>

                }

            </div>

            <img src="./assets/images/board-layer-white-large.svg" alt="" class="board-layer" />

        </div>

        <div class="board-container">
            <div class="board">
                @for (var i = 0; i < 7; i++)
                {
                    <div class="column-overlay">
                        @for (var j = 0; j < 6; j++)
                        {
                            var x = i;
                            var y = j;

                            <div class="gamepiece-overlay" @onclick="@(() => PlayPiece(x,y))" style="@(GetWinSpaces(_winningPlay, i, j) ? "background: transparent url('./assets/images/circle.svg') center center no-repeat" : "")"></div>

                        }

                    </div>

                }

            </div>

        </div>

    </main>

</div>


@code {

    GameBoard _gameBoard = new();
    GamePlayer _currentTurn = GamePlayer.Player1;
    WinningPlay _winningPlay;

    private void PlayPiece(int x, int y)
    {
        if (_winningPlay != null) { return; }

        var clickedSpace = _gameBoard.Board[x, y];

        if (clickedSpace.Player == GamePlayer.None)
        {
            while (y < 5)
            {
                var nextSpace = _gameBoard.Board[x, y + 1];

                y += 1;

                if (nextSpace.Player == GamePlayer.None)
                {
                    clickedSpace = nextSpace;

                }

            }

            clickedSpace.Player = _currentTurn;

        }

        _winningPlay = GetWinner();

        if (_winningPlay == null)
        {
            SwitchTurns();

        }

    }

    private void SwitchTurns() => _currentTurn = _currentTurn == GamePlayer.Player1 ? GamePlayer.Player2 : GamePlayer.Player1;

    private WinningPlay GetWinner()
    {
        for (var i = 0; i < 7; i++)
        {
            for (var j = 0; j < 6; j++)
            {
                var winningPlay = CheckForWin(i, j, CheckWinPosition.Vertical);
                if (winningPlay != null) { return winningPlay; }

                winningPlay = CheckForWin(i, j, CheckWinPosition.ForwardDiagonal);
                if (winningPlay != null) { return winningPlay; }

                winningPlay = CheckForWin(i, j, CheckWinPosition.Horizontal);
                if (winningPlay != null) { return winningPlay; }

                winningPlay = CheckForWin(i, j, CheckWinPosition.BackwardDiagonal);
                if (winningPlay != null) { return winningPlay; }

            }

        }

        return null;

    }

    private WinningPlay CheckForWin(int i, int j, CheckWinPosition pos)
    {
        var currentPlayer = _gameBoard.Board[i, j];

        if (currentPlayer.Player == GamePlayer.None) { return null; }

        var x = i;
        var y = j;
        var z = 1;

        var winningMoves = new List<string>();

        while (z < 4)
        {
            switch (pos)
            {
                case CheckWinPosition.Vertical:
                    y -= 1;
                    break;
                case CheckWinPosition.ForwardDiagonal:
                    x += 1;
                    y -= 1;
                    break;
                case CheckWinPosition.Horizontal:
                    x += 1;
                    break;
                case CheckWinPosition.BackwardDiagonal:
                    x += 1;
                    y += 1;
                    break;
            }

            if (x is < 0 or > 6 || y is < 0 or > 5) { break; }

            if (_gameBoard.Board[x, y].Player == currentPlayer.Player)
            {
                winningMoves.Add($"{x},{y}");
                z++;
            }
            else
            {
                return null;
            }

        }

        if (z < 4) return null;

        winningMoves.Add($"{i},{j}");

        return new WinningPlay()
            {
                WinningMoves = winningMoves,
                WinningPlayer = currentPlayer.Player,
                WinningPosition = pos,

            };
    }

    private void ResetGame()
    {
        _gameBoard = new GameBoard();
        _currentTurn = GamePlayer.Player1;
        _winningPlay = null;

    }

    private static bool GetWinSpaces(WinningPlay winningPlay, int i, int j)
    {

        return winningPlay?.WinningMoves?.Contains($"{i},{j}") ?? false;

    }

}